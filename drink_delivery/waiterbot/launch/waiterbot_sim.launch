<!--
  Waiterbot global navigation simulation:
  - stage
  - map_server
  - move_base
  - static map
  - amcl
  - ar_track
  - rviz view
 -->

<launch>
  <arg name="base"       value="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba -->
  <arg name="stacks"     value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

  <!-- Name of the map to use (without path nor extension) and initial position -->
  <arg name="map_name"       default="robopark_plan"/>
  <arg name="initial_pose_x" value="2.0"/>
  <arg name="initial_pose_y" value="2.0"/>
  <arg name="initial_pose_a" value="0.0"/>

  <param name="/use_sim_time" value="true"/>

  <!--  ******************** Stage ********************  -->
  <!-- 
        Publishes transforms:
          /base_link -> /base_laser
          /base_footprint -> /base_link (identity)
          /odom -> base_footprint
        Publishes topics:
          /odom : odometry data from the simulated odometry
          /base_scan : laser data from the simulated laser
          /base_pose_ground_truth : the ground truth pose
        Parameters:
          base_watchdog_timeout : time (s) after receiving the last command on cmd_vel before stopping the robot
        Args:
          -g : run in headless mode.
  --> 
  <node pkg="stage" type="stageros" name="stageros" args="$(find waiterbot)/resources/stage/worlds/$(arg map_name).world">
    <param name="base_watchdog_timeout" value="0.5"/>
    <remap from="odom" to="odom"/>
    <remap from="base_pose_ground_truth" to="base_pose_ground_truth"/>
    <remap from="cmd_vel" to="mobile_base/commands/velocity"/>
    <remap from="base_scan" to="scan"/>
  </node>


  <!--  ***************** Robot Model *****************  -->
  <include file="$(find turtlebot_bringup)/launch/includes/_robot.launch">
    <arg name="base" value="$(arg base)" />
    <arg name="stacks" value="$(arg stacks)" />
    <arg name="3d_sensor" value="$(arg 3d_sensor)" />
  </include>
   <include file="$(find waiterbot)/launch/includes/_ir_frames.launch"/>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="true"/>
  </node>
  
  <!--  ************* Navigation manager **************  -->  
  <node name="waiterbot" pkg="waiterbot" type="waiterbot_node" >
    <param name="base_beacon_distance" value="0.4"/>   <!-- At which distance from the base we start relaying on ir beacons -->  
    <param name="base_marker_distance" value="1.4"/>   <!-- At which distance from the base we start relaying on ar markers -->  
    <param name="check_localized" value="true"/>
    <param name="amcl_max_error" value="1.0"/>
    <param name="global_frame" value="map"/>
    <param name="odom_frame" value="odom"/>
    <param name="base_frame" value="base_footprint"/>
    <param name="tf_broadcast_freq" value="5.0"/>

    <!-- Incoming remaps -->
    <remap from="new_goal"    to="move_base_simple/goal"/>
    <remap from="amcl_init"   to="initialpose"/>
    <remap from="amcl_pose"   to="amcl_pose"/>
    <remap from="odometry"    to="odom"/>

    <!-- Outgoing remaps -->
    <remap from="issue_goal"  to="move_base_simple/goal"/>
    <remap from="cancel_goal" to="move_base/cancel"/>
    <remap from="reset_pose"  to="initialpose"/>
  </node>

  <!--  ************** Rosnav move base ***************  -->
  <include file="$(find waiterbot)/launch/includes/_move_base.launch"/>

  <!--  ****** Geometric and semantic map servers *****  -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find waiterbot)/resources/stage/maps/$(arg map_name).yaml">
    <param name="frame_id" value="/map"/>
  </node>
  <include ns="semantic_map" file="$(find semantic_region_handler)/launch/data_publisher_from_file.launch"/> 

  <!--  ******************** Amcl *********************  -->
  <include file="$(find waiterbot)/launch/includes/_amcl.launch">
<!--       <arg name="tf_broadcast" value="false"/>
-->
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
<!--
    <arg name="initial_cov_xx" value="0.01"/>
    <arg name="initial_cov_yy" value="0.01"/>
    <arg name="initial_cov_aa" value="0.01"/>
-->    </include>

  <!--  ********** Mixing with the real world **********  -->
  <include file="$(find waiterbot)/launch/includes/_ar_tracker.launch"/>
  <include file="$(find turtlebot_bringup)/launch/3dsensor.launch"/>
  <include file="$(find kobuki_auto_docking)/launch/standalone.launch"/>

  <!--  ***************** Visualisation *****************  -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find turtlebot_rviz_launchers)/rviz/navigation.rviz" />
</launch>
