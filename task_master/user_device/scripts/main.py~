#!/usr/bin/env python
import rospy
import std_msgs

import threading
import random

import actionlib
import cafe_msgs.action import UserOrder
import cafe_msgs.msg import Order
global pub
global user_id; user_id = 0	
global order_list; order_list = {}

def Recv(data):
	order_list[data.user_id].status = 'Arrival' 
	



def NewOrderGeneration():   
	global order_list
	global pub
	global user_id
	user_id = user_id +1

	new_order = Order()
	new_order.user_id = user_id
	new_order.table_id = random.randrange(1,7)
	new_order.robot_id = -1
	new_order.status = 'Idle'
	pub.publish(new_order)
	order_list[user_id] = new_order
	print "New Order Generation[userID: %d][tableID: %d]"%(new_order.user_id,new_order.table_id)
	
	
	while new_order.status != 'Arrival' or rospy.is_shutdown():
		print "Arrival [userID: %d][tableID: %d]"%(new_order.user_id)
		rospy.sleep(1)
		pass
	
	

if __name__ == '__main__':
    
	try:
		global user_id
		user_id = user_id +1
		
		new_order = Order()
		new_order.user_id = user_id
		new_order.table_id = random.randrange(1,7)
		new_order.robot_id = -1
	
		rospy.init_node('user_deivce')
		client = actionlib.SimpleActionClient('send_order',UserOrder)
		client.wait_for_server()
			
		goal=UserOrder(order=new_order) 
		client.send_goal(goal)
		
		client.wait_for_result()
		result = client.get_result()
		
		
		
		"""
		global pub
		pub = rospy.Publisher('user_device_order_sub', Order)
		
		
		rospy.Subscriber("user_device_order_pub",Order,Recv)

		i = 0
		timeout = random.randrange(5,10)+5
		#timeout = 10
		while i< timeout or rospy.is_shutdown():
			i+=1
			rospy.sleep(1)
		
			ThreadNewOrderGenerator = threading.Thread(target=NewOrderGeneration, args=())
			ThreadNewOrderGenerator.start()
		
			print "Wait next order %d/%d"%(i,timeout)
		"""
		
	
	except rospy.ROSInterruptException:
		pass
